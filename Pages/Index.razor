@page "/"
@using CreatingQueryBuilderSample.Data
@using CreatingQueryBuilderSample.Models
@using Microsoft.EntityFrameworkCore
@inject ApplicationDbContext DbContext
@inject IJSRuntime JS

<SfQueryBuilder TValue="EmployeeDetails" @ref="queryBuilder">
    <QueryBuilderRule Condition="and" Rules="Rules"></QueryBuilderRule>
    <QueryBuilderColumns>
        <QueryBuilderColumn Field="HireDate" Label="Hire Date" Type="ColumnType.Date" Format="MM-yyyy-dd"></QueryBuilderColumn>
        <QueryBuilderColumn Field="FirstName" Label="First Name" Type="ColumnType.String"></QueryBuilderColumn>
        <QueryBuilderColumn Field="Salary" Label="Salary" Type="ColumnType.Number" Format="c2"></QueryBuilderColumn>
    </QueryBuilderColumns>
</SfQueryBuilder>

<button @onclick="ApplyFilter"><i class="fa-solid fa-filter"></i>Apply Filter</button>
<button id="printbtn" @onclick="Print"><i class="fa-solid fa-print"></i>Print</button>

<table border="1">
    <thead>
        <tr>
            <th>Employee ID</th>
            <th>First Name</th>
            <th>Title</th>
            <th>Hire Date</th>
            <th>Country</th>
            <th>City</th>
            <th>Salary</th>
        </tr>
    </thead>
    <tbody>
        @foreach (var employee in FilteredEmployees)
        {
            <tr>
                <td>@employee.EmployeeID</td>
                <td>@employee.FirstName</td>
                <td>@employee.Title</td>
                <td>@employee.HireDate.ToString("MM-yyyy-dd")</td>
                <td>@employee.Country</td>
                <td>@employee.City</td>
                <td>@employee.Salary.ToString("C2")</td>
            </tr>
        }
    </tbody>
</table>

@code {
    SfQueryBuilder<EmployeeDetails>? queryBuilder;
    List<EmployeeDetails> Employees = new List<EmployeeDetails>();
    List<EmployeeDetails> FilteredEmployees = new List<EmployeeDetails>();

    List<RuleModel> Rules = new List<RuleModel>
    {
        new RuleModel { Field="Salary", Label="Salary", Type="Number", Operator="greaterthan", Value = 23000 }
    };

    protected override async Task OnInitializedAsync()
    {
        try
        {
            Employees = await DbContext.Employees.ToListAsync(); 
            FilteredEmployees = Employees.ToList();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error fetching employees: {ex.Message}");
        }
    }

    private void ApplyFilter()
    {
        var currentRules = queryBuilder?.GetRules();

        if (currentRules == null)
        {
            FilteredEmployees = Employees.ToList();
        }
        else
        {
            FilteredEmployees = FilterEmployees(currentRules).ToList();
        }
        StateHasChanged();
    }

    private IEnumerable<EmployeeDetails> FilterEmployees(RuleModel rules)
    {
        if (rules.Rules == null || !rules.Rules.Any())
        {
            return Employees;
        }

        IEnumerable<EmployeeDetails> result = Employees;

        if (rules.Condition == "and")
        {
            foreach (var rule in rules.Rules)
            {
                result = ApplyRule(result, rule);
            }
        }
        else
        {
            var orResults = new List<EmployeeDetails>();
            foreach (var rule in rules.Rules)
            {
                orResults.AddRange(ApplyRule(Employees, rule));
            }
            result = orResults.Distinct();
        }

        return result;
    }

    private IEnumerable<EmployeeDetails> ApplyRule(IEnumerable<EmployeeDetails> employees, RuleModel rule)
    {
        if (rule.Rules != null && rule.Rules.Any())
        {
            return FilterEmployees(rule);
        }

        switch (rule.Field?.ToLower())
        {
            case "hiredate":
                if (rule.Value is DateTime hireDate || DateTime.TryParse(rule.Value?.ToString(), out hireDate))
                {
                    return employees.Where(e => CompareValues(e.HireDate, hireDate, rule.Operator));
                }
                break;

            case "salary":
                if (decimal.TryParse(rule.Value?.ToString(), out decimal salary))
                {
                    return employees.Where(e => CompareValues(e.Salary, salary, rule.Operator));
                }
                break;

            case "firstname":
                return employees.Where(e => CompareValues(e.FirstName, rule.Value?.ToString(), rule.Operator));

            case "country":
                return employees.Where(e => CompareValues(e.Country, rule.Value?.ToString(), rule.Operator));

            case "city":
                return employees.Where(e => CompareValues(e.City, rule.Value?.ToString(), rule.Operator));
        }

        return employees;
    }

    private bool CompareValues<T>(T fieldValue, T filterValue, string operation) where T : IComparable
    {
        if (filterValue == null) return true;

        return operation?.ToLower() switch
        {
            "equal" => fieldValue.CompareTo(filterValue) == 0,
            "notequal" => fieldValue.CompareTo(filterValue) != 0,
            "greaterthan" => fieldValue.CompareTo(filterValue) > 0,
            "greaterthanorequal" => fieldValue.CompareTo(filterValue) >= 0,
            "lessthan" => fieldValue.CompareTo(filterValue) < 0,
            "lessthanorequal" => fieldValue.CompareTo(filterValue) <= 0,
            "contains" => fieldValue.ToString().Contains(filterValue.ToString(), StringComparison.OrdinalIgnoreCase),
            "startswith" => fieldValue.ToString().StartsWith(filterValue.ToString(), StringComparison.OrdinalIgnoreCase),
            "endswith" => fieldValue.ToString().EndsWith(filterValue.ToString(), StringComparison.OrdinalIgnoreCase),
            _ => true
        };
    }

    private async void Print()
    {
        await JS.InvokeVoidAsync("printTable");
    }
}

<style>
    table {
        width: 100%;
        border-collapse: collapse;
        margin-top: 10px;
        font-family: Arial, sans-serif;
    }

    th, td {
        border: 1px solid #ddd;
        padding: 8px;
        text-align: left;
    }

    th {
        background-color: #007BFF;
        color: white;
    }

    tr:nth-child(even) {
        background-color: #f2f2f2;
    }

    tr:hover {
        background-color: #ddd;
    }

    button {
        margin-top: 10px;
        padding: 8px 12px;
        background-color: #28a745;
        color: white;
        border: none;
        cursor: pointer;
        border-radius: 5px;
    }

        button:hover {
            background-color: #218838;
        }

        #printbtn{
            background-color:darkred
        }
</style>
