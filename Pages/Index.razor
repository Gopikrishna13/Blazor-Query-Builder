@page "/"
@using CreatingQueryBuilderSample.Data
@using CreatingQueryBuilderSample.Models
@using Microsoft.EntityFrameworkCore
@inject ApplicationDbContext DbContext
@inject IJSRuntime JS

<SfQueryBuilder TValue="EmployeeDetails" @ref="queryBuilder">
    <QueryBuilderRule Condition="and" Rules="Rules"></QueryBuilderRule>
    <QueryBuilderColumns>
        @foreach (var column in DisplayedColumns)
        {
            <QueryBuilderColumn Field="@column.Field" Label="@column.Label" Type="@column.Type" Format="@column.Format"></QueryBuilderColumn>
        }
    </QueryBuilderColumns>
</SfQueryBuilder>

<h3>Select Columns to Display:</h3>
@foreach (var column in AllColumns)
{
    <label>
        <input type="checkbox" @bind="column.IsSelected" /> @column.Label
    </label>
}

<button @onclick="ApplyFilter">Apply Filter</button>
<button @onclick="AddSortField">+ Add Sort Field</button>
<button @onclick="ApplySorting">Apply Sorting</button>

<button id="printbtn" @onclick="Print"><i class="fa-solid fa-print"></i> Print</button>

@* Sorting Fields *@
<div>
    @foreach (var sort in SortFields)
    {
        <div>
            <select @bind="sort.Field">
                <option value="">-- Select Field --</option>
                @foreach (var column in AllColumns)
                {
                    <option value="@column.Field">@column.Label</option>
                }
            </select>

            <select @bind="sort.Order">
                <option value="asc">Ascending</option>
                <option value="desc">Descending</option>
            </select>

            <button @onclick="() => RemoveSortField(sort)">❌ Remove</button>
        </div>
    }
</div>

<table border="1">
    <thead>
        <tr>
            @foreach (var column in DisplayedColumns)
            {
                <th>@column.Label</th>
            }
        </tr>
    </thead>
    <tbody>
        @foreach (var employee in FilteredEmployees)
        {
            <tr>
                @foreach (var column in DisplayedColumns)
                {
                    <td>@GetPropertyValue(employee, column.Field)</td>
                }
            </tr>
        }
    </tbody>
</table>

@code {
    SfQueryBuilder<EmployeeDetails>? queryBuilder;
    List<EmployeeDetails> Employees = new List<EmployeeDetails>();
    List<EmployeeDetails> FilteredEmployees = new List<EmployeeDetails>();

    List<CustomQueryBuilderColumn> AllColumns = new List<CustomQueryBuilderColumn>();
    List<CustomQueryBuilderColumn> DisplayedColumns => AllColumns.Where(c => c.IsSelected).ToList();

    List<RuleModel> Rules = new List<RuleModel>();
    List<SortField> SortFields = new List<SortField>();

    protected override async Task OnInitializedAsync()
    {
        try
        {
            Employees = await DbContext.Employees.ToListAsync();
            FilteredEmployees = Employees.ToList();
            GenerateColumns();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error fetching employees: {ex.Message}");
        }
    }

    private void GenerateColumns()
    {
        AllColumns = typeof(EmployeeDetails).GetProperties()
            .Select(prop => new CustomQueryBuilderColumn
                {
                    Field = prop.Name,
                    Label = prop.Name.Replace("_", " "),
                    Type = GetColumnType(prop.PropertyType),
                    Format = prop.PropertyType == typeof(DateTime) ? "MM-yyyy-dd" : null,
                    IsSelected = true // Default: All columns are selected
                }).ToList();
    }

    private ColumnType GetColumnType(Type type)
    {
        if (type == typeof(int) || type == typeof(decimal) || type == typeof(double)) return ColumnType.Number;
        if (type == typeof(DateTime)) return ColumnType.Date;
        return ColumnType.String;
    }

    private void ApplyFilter()
    {
        var currentRules = queryBuilder?.GetRules();
        FilteredEmployees = currentRules == null ? Employees.ToList() : FilterEmployees(currentRules).ToList();
        ApplySorting();
        StateHasChanged();
    }

    private IEnumerable<EmployeeDetails> FilterEmployees(RuleModel rules)
    {
        if (rules.Rules == null || !rules.Rules.Any()) return Employees;
        IEnumerable<EmployeeDetails> result = Employees;

        if (rules.Condition == "and")
        {
            foreach (var rule in rules.Rules)
            {
                result = ApplyRule(result, rule);
            }
        }
        else
        {
            var orResults = new List<EmployeeDetails>();
            foreach (var rule in rules.Rules)
            {
                orResults.AddRange(ApplyRule(Employees, rule));
            }
            result = orResults.Distinct();
        }
        return result;
    }

    private IEnumerable<EmployeeDetails> ApplyRule(IEnumerable<EmployeeDetails> employees, RuleModel rule)
    {
        if (rule.Rules != null && rule.Rules.Any()) return FilterEmployees(rule);
        var property = typeof(EmployeeDetails).GetProperty(rule.Field);
        if (property == null) return employees;

        return employees.Where(e => CompareValues(property.GetValue(e), rule.Value, rule.Operator));
    }

    private bool CompareValues(object fieldValue, object filterValue, string operation)
    {
        if (fieldValue == null || filterValue == null) return false;

        try
        {
            var fieldType = fieldValue.GetType();
            var convertedFilterValue = Convert.ChangeType(filterValue, fieldType);

            if (fieldValue is IComparable comparable)
            {
                return operation?.ToLower() switch
                {
                    "equal" => comparable.CompareTo(convertedFilterValue) == 0,
                    "notequal" => comparable.CompareTo(convertedFilterValue) != 0,
                    "greaterthan" => comparable.CompareTo(convertedFilterValue) > 0,
                    "greaterthanorequal" => comparable.CompareTo(convertedFilterValue) >= 0,
                    "lessthan" => comparable.CompareTo(convertedFilterValue) < 0,
                    "lessthanorequal" => comparable.CompareTo(convertedFilterValue) <= 0,
                    "contains" => fieldValue.ToString().Contains(filterValue.ToString(), StringComparison.OrdinalIgnoreCase),
                    "startswith" => fieldValue.ToString().StartsWith(filterValue.ToString(), StringComparison.OrdinalIgnoreCase),
                    "endswith" => fieldValue.ToString().EndsWith(filterValue.ToString(), StringComparison.OrdinalIgnoreCase),
                    _ => true
                };
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error in CompareValues: {ex.Message}");
        }
        return false;
    }

    private object GetPropertyValue(EmployeeDetails employee, string propertyName)
    {
        return typeof(EmployeeDetails).GetProperty(propertyName)?.GetValue(employee, null) ?? "";
    }

    private void AddSortField()
    {
        SortFields.Add(new SortField { Field = "", Order = "asc" });
    }

    private void RemoveSortField(SortField sortField)
    {
        SortFields.Remove(sortField);
    }

    private void ApplySorting()
    {
        if (!SortFields.Any() || SortFields.All(s => string.IsNullOrEmpty(s.Field)))
        {
            StateHasChanged();
            return;
        }

        IOrderedEnumerable<EmployeeDetails>? sortedList = null;

        foreach (var sort in SortFields)
        {
            var propertyInfo = typeof(EmployeeDetails).GetProperty(sort.Field);
            if (propertyInfo == null) continue;

            if (sortedList == null)
            {
                sortedList = sort.Order == "asc"
                    ? FilteredEmployees.OrderBy(e => propertyInfo.GetValue(e, null))
                    : FilteredEmployees.OrderByDescending(e => propertyInfo.GetValue(e, null));
            }
            else
            {
                sortedList = sort.Order == "asc"
                    ? sortedList.ThenBy(e => propertyInfo.GetValue(e, null))
                    : sortedList.ThenByDescending(e => propertyInfo.GetValue(e, null));
            }
        }

        if (sortedList != null)
        {
            FilteredEmployees = sortedList.ToList();
        }

        StateHasChanged();
    }

    private async void Print()
    {
        await JS.InvokeVoidAsync("printTable");
    }

    public class CustomQueryBuilderColumn : QueryBuilderColumn
    {
        public bool IsSelected { get; set; } = true;
    }

    class SortField
    {
        public string Field { get; set; } = "";
        public string Order { get; set; } = "asc";
    }
}



<style>
    table {
        width: 100%;
        border-collapse: collapse;
        margin-top: 10px;
        font-family: Arial, sans-serif;
    }

    th, td {
        border: 1px solid #ddd;
        padding: 8px;
        text-align: left;
    }

    th {
        background-color: #007BFF;
        color: white;
    }

    tr:nth-child(even) {
        background-color: #f2f2f2;
    }

    tr:hover {
        background-color: #ddd;
    }

    button {
        margin-top: 10px;
        padding: 8px 12px;
        background-color: #28a745;
        color: white;
        border: none;
        cursor: pointer;
        border-radius: 5px;
    }

        button:hover {
            background-color: #218838;
        }

    #printbtn {
        background-color: darkred;
    }

    #options{
        background-color:orangered;
    }
</style>
